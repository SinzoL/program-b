#!/usr/bin/env python3
"""
‰ªªÂä°ÂàÜÊûêÊ®°Âùó
Ë¥üË¥£‰ªªÂä°ËØÜÂà´„ÄÅÂàÜÁ±ªÂíåÁâπÂæÅÊèêÂèñ
"""

from typing import Dict
import logging

logger = logging.getLogger(__name__)

class TaskAnalyzer:
    """‰ªªÂä°ÂàÜÊûêÂô®"""
    
    def __init__(self):
        pass
    
    def analyze_task(self, prompt: str, complexity_score: float = None, language_score: float = None) -> Dict:
        """ÁªºÂêà‰ªªÂä°ÂàÜÊûê"""
        if complexity_score is not None and language_score is not None:
            # ‰ΩøÁî®ËØ≠‰πâÂ¢ûÂº∫ÂàÜÊûê
            return self._enhanced_task_analysis(prompt, complexity_score, language_score)
        else:
            # ‰ΩøÁî®ËßÑÂàôÂàÜÊûê
            return self._rule_based_analysis(prompt)
    
    def _enhanced_task_analysis(self, prompt: str, complexity_score: float, language_score: float) -> Dict:
        """Â¢ûÂº∫ÁöÑ‰ªªÂä°ÂàÜÊûêÊñπÊ≥ïÔºåÁªìÂêàËßÑÂàôÂíåËØ≠‰πâÁâπÂæÅ"""
        prompt_lower = prompt.lower()
        
        # Êõ¥Á≤æÁ°ÆÁöÑ‰ªªÂä°Á±ªÂûãËØÜÂà´
        task_type = "ÈÄöÁî®"
        confidence = 0.5
        
        # ÁºñÁ®ãÁõ∏ÂÖ≥ÂÖ≥ÈîÆËØçÊ£ÄÊµãÔºàÊùÉÈáçÊõ¥È´òÔºâ
        programming_keywords = [
            "code", "python", "javascript", "js", "function", "method", "class",
            "Á®ãÂ∫è", "‰ª£Á†Å", "ÁºñÁ®ã", "ÂáΩÊï∞", "ÊñπÊ≥ï", "Á±ª", "ÁÆóÊ≥ï", "ÂÆûÁé∞",
            "‰∏ãÂàíÁ∫ø", "È©ºÂ≥∞", "camelcase", "underscore", "ËΩ¨Êç¢", "ËΩ¨Âåñ",
            "ÂèòÈáè", "ÂëΩÂêç", "Ê†ºÂºè", "string", "Â≠óÁ¨¶‰∏≤"
        ]
        programming_score = sum(1 for word in programming_keywords if word in prompt_lower)
        
        # ÂàõÊÑèÂÜô‰ΩúÂÖ≥ÈîÆËØç
        creative_keywords = ["story", "poem", "creative", "ÊïÖ‰∫ã", "ËØóÊ≠å", "ÂàõÊÑè", "ÂÜô‰Ωú", "Â∞èËØ¥", "Êï£Êñá"]
        creative_score = sum(1 for word in creative_keywords if word in prompt_lower)
        
        # ÁøªËØëÂÖ≥ÈîÆËØç
        translation_keywords = ["translate", "ÁøªËØë", "‰∏≠Êñá", "english", "french", "ËØ≠Ë®Ä", "ËΩ¨ËØë"]
        translation_score = sum(1 for word in translation_keywords if word in prompt_lower)
        
        # Êï∞Â≠¶ÂÖ≥ÈîÆËØç
        math_keywords = ["math", "calculate", "Êï∞Â≠¶", "ËÆ°ÁÆó", "solve", "equation", "ÂÖ¨Âºè", "Ê±ÇËß£"]
        math_score = sum(1 for word in math_keywords if word in prompt_lower)
        
        # ÂàÜÊûêÂÖ≥ÈîÆËØç
        analysis_keywords = ["analyze", "explain", "ÂàÜÊûê", "Ëß£Èáä", "describe", "ÊèèËø∞", "ËØÑ‰ª∑"]
        analysis_score = sum(1 for word in analysis_keywords if word in prompt_lower)
        
        # Á°ÆÂÆö‰ªªÂä°Á±ªÂûãÂíåÁΩÆ‰ø°Â∫¶
        scores = {
            "ÁºñÁ®ã": programming_score,
            "ÂàõÊÑèÂÜô‰Ωú": creative_score,
            "ÁøªËØë": translation_score,
            "Êï∞Â≠¶": math_score,
            "ÂàÜÊûê": analysis_score
        }
        
        max_score = max(scores.values())
        if max_score > 0:
            task_type = max(scores, key=scores.get)
            confidence = min(0.9, 0.5 + max_score * 0.1)
        
        # ÁâπÊÆäÊ®°ÂºèÊ£ÄÊµãÔºö‰∏ãÂàíÁ∫øËΩ¨È©ºÂ≥∞
        if any(word in prompt_lower for word in ["‰∏ãÂàíÁ∫ø", "È©ºÂ≥∞", "camelcase", "underscore"]):
            task_type = "ÁºñÁ®ã"
            confidence = 0.95
            logger.info("üéØ Ê£ÄÊµãÂà∞Â≠óÁ¨¶‰∏≤Ê†ºÂºèËΩ¨Êç¢‰ªªÂä°ÔºåÈ´òÁΩÆ‰ø°Â∫¶ËØÜÂà´‰∏∫ÁºñÁ®ãÁ±ªÂûã")
        
        # Âü∫‰∫éËØ≠‰πâÁâπÂæÅÂíåÂÖ≥ÈîÆËØçË∞ÉÊï¥Â§çÊùÇÂ∫¶
        base_complexity = complexity_score
        if task_type == "ÁºñÁ®ã" and max_score >= 2:
            base_complexity = max(base_complexity, 0.6)  # ÁºñÁ®ã‰ªªÂä°ÈÄöÂ∏∏ËæÉÂ§çÊùÇ
        
        if base_complexity > 0.7:
            complexity = "Â§çÊùÇ"
        elif base_complexity < 0.3:
            complexity = "ÁÆÄÂçï"
        else:
            complexity = "‰∏≠Á≠â"
        
        # ËØ≠Ë®ÄÊ£ÄÊµãÔºà‰∏≠ÊñáÂ≠óÁ¨¶ÊØî‰æãÔºâ
        chinese_chars = sum(1 for char in prompt if '\u4e00' <= char <= '\u9fff')
        total_chars = len(prompt)
        chinese_ratio = chinese_chars / total_chars if total_chars > 0 else 0
        
        language = "‰∏≠Êñá" if chinese_ratio > 0.3 else "Ëã±Êñá"
        
        result = {
            "task_type": task_type,
            "complexity": complexity,
            "language": language,
            "length": len(prompt),
            "confidence": confidence,
            "p2l_scores": {
                "complexity": base_complexity,
                "language": language_score,
                "keyword_scores": scores,
                "chinese_ratio": chinese_ratio
            }
        }
        
        logger.info(f"üìä ‰ªªÂä°ÂàÜÊûêËØ¶ÊÉÖ: {result}")
        return result
    
    def _rule_based_analysis(self, prompt: str) -> Dict:
        """Â§áÁî®ÁöÑËßÑÂàôÂàÜÊûêÊñπÊ≥ï"""
        prompt_lower = prompt.lower()
        
        # ‰ªªÂä°Á±ªÂûãËØÜÂà´
        task_type = "ÈÄöÁî®"
        if any(word in prompt_lower for word in ["code", "python", "javascript", "Á®ãÂ∫è", "‰ª£Á†Å", "ÁºñÁ®ã", "function"]):
            task_type = "ÁºñÁ®ã"
        elif any(word in prompt_lower for word in ["story", "poem", "creative", "ÊïÖ‰∫ã", "ËØóÊ≠å", "ÂàõÊÑè", "ÂÜô‰Ωú"]):
            task_type = "ÂàõÊÑèÂÜô‰Ωú"
        elif any(word in prompt_lower for word in ["translate", "ÁøªËØë", "‰∏≠Êñá", "english", "french"]):
            task_type = "ÁøªËØë"
        elif any(word in prompt_lower for word in ["math", "calculate", "Êï∞Â≠¶", "ËÆ°ÁÆó", "solve", "equation"]):
            task_type = "Êï∞Â≠¶"
        elif any(word in prompt_lower for word in ["analyze", "explain", "ÂàÜÊûê", "Ëß£Èáä", "describe"]):
            task_type = "ÂàÜÊûê"
        
        # Â§çÊùÇÂ∫¶ËØÑ‰º∞
        complexity = "ÁÆÄÂçï"
        if len(prompt) > 100 or any(word in prompt_lower for word in ["complex", "advanced", "ËØ¶ÁªÜ", "ÂÆåÊï¥"]):
            complexity = "Â§çÊùÇ"
        elif len(prompt) > 50:
            complexity = "‰∏≠Á≠â"
        
        # ËØ≠Ë®ÄÊ£ÄÊµã
        language = "Ëã±Êñá"
        chinese_chars = sum(1 for char in prompt if '\u4e00' <= char <= '\u9fff')
        if chinese_chars > len(prompt) * 0.3:
            language = "‰∏≠Êñá"
        
        return {
            "task_type": task_type,
            "complexity": complexity,
            "language": language,
            "length": len(prompt)
        }
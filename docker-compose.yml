services:
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.backend
    container_name: p2l-backend
    ports:
      - "8080:8080"
    environment:
      - P2L_ENV=production
      - P2L_HOST=0.0.0.0
      - P2L_PORT=8080
      # Python路径配置
      - PYTHONPATH=/app:/app/backend:/app/backend/model_p2l
      # 内存优化配置 - 更宽松的设置
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:256
      - OMP_NUM_THREADS=4
      - TOKENIZERS_PARALLELISM=false
      # P2L 特定配置
      - P2L_MODEL_PATH=/app/backend/model_p2l/models/p2l-135m-grk
      - P2L_DEVICE=cpu
    volumes:
      - ./models:/app/models
      - ./p2l:/app/p2l:ro
      - ./logs:/app/logs
      - ./backend/model_p2l:/app/backend/model_p2l:ro
    restart: unless-stopped
    # 更宽松的资源限制
    deploy:
      resources:
        limits:
          memory: 4G      # 增加内存限制
          cpus: '2.0'     # 增加CPU限制
        reservations:
          memory: 2G      # 增加内存预留
          cpus: '1.0'     # 增加CPU预留
    # 优化的健康检查
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health', timeout=30)"]
      interval: 30s       # 减少检查频率
      timeout: 30s        # 增加超时时间
      retries: 10         # 增加重试次数
      start_period: 600s  # 增加启动等待时间到10分钟
    logging:
      driver: "json-file"
      options:
        max-size: "10m"   # 增加日志大小
        max-file: "3"     # 增加日志文件数

  frontend:
    build: 
      context: .
      dockerfile: Dockerfile.frontend
    container_name: p2l-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy  # 等待后端健康检查通过
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G      # 增加前端内存
          cpus: '1.0'     # 增加前端CPU
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: p2l-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  default:
    name: p2l-network
    driver: bridge

volumes:
  logs:
    driver: local
  models:
    driver: local